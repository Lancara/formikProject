{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\lnc\\\\WebstormProjects\\\\untitled\\\\src\\\\components\\\\Accessible\\\\Accessible.jsx\";\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { useFormik, FormikProvider, Form, useField } from 'formik';\nimport './styles.css';\nimport * as Yup from 'yup';\n\nvar sleep = function sleep(ms) {\n  return new Promise(function (r) {\n    return setTimeout(r, ms);\n  });\n};\n\nvar TextInputLiveFeedback = function TextInputLiveFeedback(_ref) {\n  var label = _ref.label,\n      helpText = _ref.helpText,\n      props = _objectWithoutProperties(_ref, [\"label\", \"helpText\"]);\n\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      meta = _useField2[1]; // Show inline feedback if EITHER\n  // - the input is focused AND value is longer than 2 characters\n  // - or, the has been visited (touched === true)\n\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      didFocus = _React$useState2[0],\n      setDidFocus = _React$useState2[1];\n\n  var handleFocus = function handleFocus() {\n    return setDidFocus(true);\n  };\n\n  var showFeedback = !!didFocus && field.value.trim().length > 2 || meta.touched;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-control \".concat(showFeedback ? meta.error ? 'invalid' : 'valid' : ''),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex items-center space-between\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }, label), ' ', showFeedback ? /*#__PURE__*/React.createElement(\"div\", {\n    id: \"\".concat(props.id, \"-feedback\"),\n    \"aria-live\": \"polite\",\n    className: \"feedback text-sm\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }\n  }, meta.error ? meta.error : 'âœ“') : null), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, props, field, {\n    \"aria-describedby\": \"\".concat(props.id, \"-feedback \").concat(props.id, \"-help\"),\n    onFocus: handleFocus,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-xs\",\n    id: \"\".concat(props.id, \"-help\"),\n    tabIndex: \"-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, helpText));\n};\n\nvar Example = function Example() {\n  var formik = useFormik({\n    initialValues: {\n      username: ''\n    },\n    onSubmit: function () {\n      var _onSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return sleep(500);\n\n              case 2:\n                alert(JSON.stringify(values, null, 2));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onSubmit(_x) {\n        return _onSubmit.apply(this, arguments);\n      }\n\n      return onSubmit;\n    }(),\n    validationSchema: Yup.object({\n      username: Yup.string().min(8, 'Must be at least 8 characters').max(20, 'Must be less  than 20 characters').required('Username is required').matches(/^[a-zA-Z0-9]+$/, 'Cannot contain special characters or spaces')\n    })\n  });\n  return /*#__PURE__*/React.createElement(FormikProvider, {\n    value: formik,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TextInputLiveFeedback, {\n    label: \"Username\",\n    id: \"username\",\n    name: \"username\",\n    helpText: \"Must be 8-20 characters and cannot contain special characters.\",\n    type: \"text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  }, \"Submit\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"reset\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }, \"Reset\"))));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(\"div\", {\n  className: \"app\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"h1\", {\n  className: \"text-4xl\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }\n}, \"Accessible instant feeback with Formik 2\"), /*#__PURE__*/React.createElement(\"p\", {\n  className: \"text-lg\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }\n}, \"Instant feedback during typing can be extremely helpful in certain situations. For example, checking the validity (or availability) of a username shouldn't require the user to resubmit the form (multiple times). Providing instant feedback while users are typing can allow them to experiment more easily until they find valid input value (like a suitable username). Note: This isn't always optimal, use your judgement.\"), /*#__PURE__*/React.createElement(\"div\", {\n  className: \"example\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(Example, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 13\n  }\n})), /*#__PURE__*/React.createElement(\"p\", {\n  className: \"text-md mt-1\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"strong\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 13\n  }\n}, \"Note:\"), \" The displayed feedback message in this example is coded using a \", /*#__PURE__*/React.createElement(\"code\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 27\n  }\n}, \"<div>\"), \" element that has an\", ' ', /*#__PURE__*/React.createElement(\"code\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 13\n  }\n}, \"aria-live\"), \" attribute with the value \", /*#__PURE__*/React.createElement(\"code\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 65\n  }\n}, \"polite\"), \". The contents of this so called \\\"live region\\\" are conveyed to screen readers and other assistive technology. The value \\\"polite\\\" de-emphasizes the importance of the message and does not cause screen readers to interrupt their current tasks to read aloud this message. Thus the message is only read once when the user stops typing rather than on every keystroke that the user makes.\"), /*#__PURE__*/React.createElement(\"p\", {\n  className: \"text-sm\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(\"i\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 13\n  }\n}, \"Example adapted from\", ' ', /*#__PURE__*/React.createElement(\"a\", {\n  href: \"https://www.w3.org/WAI/tutorials/forms/notifications/\",\n  target: \"blank\",\n  rel: \"noopener noreferrer\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 17\n  }\n}, \"W3C WAI Web Accessibility Tutorials\")))), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/lnc/WebstormProjects/untitled/src/components/Accessible/Accessible.jsx"],"names":["React","ReactDOM","useFormik","FormikProvider","Form","useField","Yup","sleep","ms","Promise","r","setTimeout","TextInputLiveFeedback","label","helpText","props","field","meta","useState","didFocus","setDidFocus","handleFocus","showFeedback","value","trim","length","touched","error","id","Example","formik","initialValues","username","onSubmit","values","alert","JSON","stringify","validationSchema","object","string","min","max","required","matches","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { useFormik, FormikProvider, Form, useField } from 'formik';\r\nimport './styles.css';\r\nimport * as Yup from 'yup';\r\n\r\n\r\n\r\n\r\n\r\nconst sleep = (ms) => new Promise((r) => setTimeout(r, ms));\r\n\r\nconst TextInputLiveFeedback = ({ label, helpText, ...props }) => {\r\n    const [field, meta] = useField(props);\r\n\r\n    // Show inline feedback if EITHER\r\n    // - the input is focused AND value is longer than 2 characters\r\n    // - or, the has been visited (touched === true)\r\n    const [didFocus, setDidFocus] = React.useState(false);\r\n    const handleFocus = () => setDidFocus(true);\r\n    const showFeedback =\r\n        (!!didFocus && field.value.trim().length > 2) || meta.touched;\r\n\r\n    return (\r\n        <div\r\n            className={`form-control ${\r\n                showFeedback ? (meta.error ? 'invalid' : 'valid') : ''\r\n            }`}\r\n        >\r\n            <div className=\"flex items-center space-between\">\r\n                <label htmlFor={props.id}>{label}</label>{' '}\r\n                {showFeedback ? (\r\n                    <div\r\n                        id={`${props.id}-feedback`}\r\n                        aria-live=\"polite\"\r\n                        className=\"feedback text-sm\"\r\n                    >\r\n                        {meta.error ? meta.error : 'âœ“'}\r\n                    </div>\r\n                ) : null}\r\n            </div>\r\n            <input\r\n                {...props}\r\n                {...field}\r\n                aria-describedby={`${props.id}-feedback ${props.id}-help`}\r\n                onFocus={handleFocus}\r\n            />\r\n            <div className=\"text-xs\" id={`${props.id}-help`} tabIndex=\"-1\">\r\n                {helpText}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Example = () => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            username: '',\r\n        },\r\n        onSubmit: async (values) => {\r\n            await sleep(500);\r\n            alert(JSON.stringify(values, null, 2));\r\n        },\r\n        validationSchema: Yup.object({\r\n            username: Yup.string()\r\n                .min(8, 'Must be at least 8 characters')\r\n                .max(20, 'Must be less  than 20 characters')\r\n                .required('Username is required')\r\n                .matches(\r\n                    /^[a-zA-Z0-9]+$/,\r\n                    'Cannot contain special characters or spaces'\r\n                ),\r\n        }),\r\n    });\r\n\r\n    return (\r\n        <FormikProvider value={formik}>\r\n            <Form>\r\n                <TextInputLiveFeedback\r\n                    label=\"Username\"\r\n                    id=\"username\"\r\n                    name=\"username\"\r\n                    helpText=\"Must be 8-20 characters and cannot contain special characters.\"\r\n                    type=\"text\"\r\n                />\r\n                <div>\r\n                    <button type=\"submit\">Submit</button>\r\n                    <button type=\"reset\">Reset</button>\r\n                </div>\r\n            </Form>\r\n        </FormikProvider>\r\n    );\r\n};\r\n\r\nReactDOM.render(\r\n    <div className=\"app\">\r\n        <h1 className=\"text-4xl\">Accessible instant feeback with Formik 2</h1>\r\n        <p className=\"text-lg\">\r\n            Instant feedback during typing can be extremely helpful in certain\r\n            situations. For example, checking the validity (or availability) of a\r\n            username shouldn't require the user to resubmit the form (multiple times).\r\n            Providing instant feedback while users are typing can allow them to\r\n            experiment more easily until they find valid input value (like a suitable\r\n            username). Note: This isn't always optimal, use your judgement.\r\n        </p>\r\n        <div className=\"example\">\r\n            <Example />\r\n        </div>\r\n        <p className=\"text-md mt-1\">\r\n            <strong>Note:</strong> The displayed feedback message in this example is\r\n            coded using a <code>{`<div>`}</code> element that has an{' '}\r\n            <code>{`aria-live`}</code> attribute with the value <code>polite</code>.\r\n            The contents of this so called \"live region\" are conveyed to screen\r\n            readers and other assistive technology. The value \"polite\" de-emphasizes\r\n            the importance of the message and does not cause screen readers to\r\n            interrupt their current tasks to read aloud this message. Thus the message\r\n            is only read once when the user stops typing rather than on every\r\n            keystroke that the user makes.\r\n        </p>\r\n        <p className=\"text-sm\">\r\n            <i>\r\n                Example adapted from{' '}\r\n                <a\r\n                    href=\"https://www.w3.org/WAI/tutorials/forms/notifications/\"\r\n                    target=\"blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                >\r\n                    W3C WAI Web Accessibility Tutorials\r\n                </a>\r\n            </i>\r\n        </p>\r\n    </div>,\r\n    document.getElementById('root')\r\n);\r\n"]},"metadata":{},"sourceType":"module"}